{"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"]},{"title":"Instance Methods","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"],"title":"Type Properties"},{"generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"title":"Default Implementations"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"typeIdentifier","preciseIdentifier":"s:6Motion17SIMDRepresentableP","text":"SIMDRepresentable"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"code":"simd","type":"codeVoice"},{"type":"text","text":" registers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. a "},{"type":"codeVoice","code":"CGRect"},{"text":" that’s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"code":"value","type":"codeVoice"},{"text":") and then setting a target (","type":"text"},{"code":"toValue","type":"codeVoice"},{"text":") to animate to.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This class, when ticked, will change a value and emit changes to that value via "},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"code":"updateValue(to:postValueChanged:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"type":"codeVoice","code":"completionBlock"},{"type":"text","text":"."}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This class is "},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"text":" thread-safe. It is meant to be run on the ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"main thread"}]},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}]}],"name":"Note","style":"note","type":"aside"},{"name":"See Also","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"BasicAnimation"},{"text":", ","type":"text"},{"type":"codeVoice","code":"DecayAnimation"},{"text":", ","type":"text"},{"code":"SpringAnimation","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"aside"}],"kind":"content"}],"metadata":{"externalID":"s:6Motion14ValueAnimationC","symbolKind":"class","modules":[{"name":"Motion"}],"navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"title":"ValueAnimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"role":"symbol","roleHeading":"Class"},"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"relationshipsSections":[{"kind":"relationships","type":"inheritsFrom","title":"Inherits From","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"]},{"title":"Inherited By","kind":"relationships","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"]},{"type":"conformsTo","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"],"title":"Conforms To","kind":"relationships"}],"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"abstract":[{"type":"text","text":"The target value to animate towards."}],"type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/tovalue","title":"toValue","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toValue","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"role":"symbol"},"doc://Motion/documentation/Motion/Animation":{"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","url":"\/documentation\/motion\/animation","title":"Animation","abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"type":"codeVoice","code":"Motion"},{"type":"text","text":". It doesn’t do much, other than serve as a base class for all animations to inherit from and implement."}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Animation"}],"navigatorTitle":[{"kind":"identifier","text":"Animation"}]},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","type":"topic","abstract":[{"text":"Call this to register a ","type":"text"},{"type":"codeVoice","code":"ValueChangedCallback"},{"text":" block that will be called anytime ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes from "},{"code":"tick","type":"codeVoice"},{"type":"text","text":" or if explicitly specified via "},{"code":"postValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"When called, it will give the new value that "},{"code":"value","type":"codeVoice"},{"type":"text","text":" has animated to (since the last invocation)."},{"text":" ","type":"text"},{"type":"text","text":"If you’re animating "},{"type":"codeVoice","code":"CALayer"},{"text":" objects from the block, you may supply ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" for "},{"type":"codeVoice","code":"disableActions"},{"type":"text","text":" to automatically have this wrapped in a "},{"type":"codeVoice","code":"CATransaction"},{"type":"text","text":" that disables implicit animations for the layer."}],"title":"onValueChanged(disableActions:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onValueChanged","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"disableActions"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ValueAnimation","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","text":"ValueChangedCallback"},{"kind":"text","text":"?)"}],"url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"abstract":[{"type":"text","text":"A block to be called when "},{"code":"value","type":"codeVoice"},{"text":" changes.","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueChangedCallback"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","title":"ValueAnimation.ValueChangedCallback","navigatorTitle":[{"text":"ValueChangedCallback","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","type":"topic","role":"symbol"},"doc://Motion/documentation/Motion/SpringAnimation":{"navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SpringAnimation","kind":"identifier"}],"title":"SpringAnimation","url":"\/documentation\/motion\/springanimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","kind":"symbol","abstract":[{"type":"text","text":"This class provides the ability to animate "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" using a physically-modeled spring."}]},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"role":"collectionGroup","abstract":[],"kind":"article","type":"topic","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","title":"Hashable Implementations","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"updateValue","kind":"identifier"},{"kind":"text","text":"("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","type":"topic","abstract":[{"text":"Updates ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" to the supplied value and optionally invokes "},{"type":"codeVoice","code":"onValueChanged"},{"type":"text","text":"."}],"title":"updateValue(to:postValueChanged:)"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"resolvingEpsilon","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SIMDType"},{"kind":"text","text":"."},{"text":"EpsilonType","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","type":"topic","title":"resolvingEpsilon","role":"symbol","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}]},"doc://Motion/documentation/Motion":{"abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"url":"\/documentation\/motion","type":"topic","role":"collection","identifier":"doc:\/\/Motion\/documentation\/Motion","kind":"symbol","title":"Motion"},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"supportsVelocity","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"supportsVelocity","role":"symbol","abstract":[{"type":"text","text":"Returns whether or not this class supports velocity."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","url":"\/documentation\/motion\/valueanimation\/supportsvelocity"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"role":"symbol","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stop"},{"text":"(","kind":"text"},{"text":"resolveImmediately","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Stops the animation immediately and preserves the last set ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}],"title":"stop(resolveImmediately:postValueChanged:)","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","kind":"symbol"},"doc://Motion/SQ":{"identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"kind":"symbol","title":"ValueAnimation","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/valueanimation","role":"symbol"},"doc://Motion/SH":{"identifier":"doc:\/\/Motion\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://Motion/documentation/Motion/SIMDRepresentable":{"abstract":[{"text":"A protocol that defines how something that can be represented \/ stored in a ","type":"text"},{"type":"codeVoice","code":"SIMD"},{"type":"text","text":" type as well as instantiated from said "},{"type":"codeVoice","code":"SIMD"},{"type":"text","text":" type."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDRepresentable","kind":"identifier"}],"url":"\/documentation\/motion\/simdrepresentable","type":"topic","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"symbol","navigatorTitle":[{"text":"SIMDRepresentable","kind":"identifier"}],"title":"SIMDRepresentable"},"doc://Motion/documentation/Motion/DecayAnimation":{"type":"topic","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" based on decay functions."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","kind":"symbol","url":"\/documentation\/motion\/decayanimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DecayAnimation","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"DecayAnimation"}],"title":"DecayAnimation","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"url":"\/documentation\/motion\/valueanimation\/value","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","kind":"symbol","title":"value","abstract":[],"type":"topic","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}]},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"velocity","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","abstract":[{"text":"The velocity of the animation. Setting this before calling ","type":"text"},{"type":"codeVoice","code":"start"},{"text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time.","type":"text"}],"kind":"symbol","title":"velocity","url":"\/documentation\/motion\/valueanimation\/velocity","role":"symbol"},"doc://Motion/documentation/Motion/BasicAnimation":{"abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"type":"codeVoice","code":"Value"},{"text":" based on basic curves (i.e. ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"text":", ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"text":", etc.).","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"BasicAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/basicanimation","title":"BasicAnimation","navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","title":"Equatable Implementations","kind":"article","type":"topic","role":"collectionGroup","abstract":[],"url":"\/documentation\/motion\/valueanimation\/equatable-implementations"}}}