{"relationshipsSections":[{"title":"Inherits From","kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"]},{"kind":"relationships","title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"]},{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"]}],"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"]},{"title":"Instance Methods","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"],"title":"Type Aliases"},{"title":"Type Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"]},{"generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"title":"Default Implementations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"metadata":{"modules":[{"name":"Motion"}],"externalID":"s:6Motion14ValueAnimationC","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"roleHeading":"Class","symbolKind":"class","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"role":"symbol","title":"ValueAnimation"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ValueAnimation","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"SIMDRepresentable","kind":"typeIdentifier","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"The interesting part of this is the ability to have animations on the value performed simultaneously using "},{"type":"codeVoice","code":"simd"},{"type":"text","text":" registers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. a "},{"type":"codeVoice","code":"CGRect"},{"text":" that’s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"code":"value","type":"codeVoice"},{"type":"text","text":") and then setting a target ("},{"type":"codeVoice","code":"toValue"},{"type":"text","text":") to animate to."}]},{"type":"paragraph","inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"type":"codeVoice","code":"onValueChanged"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"When resolved, this class will optionally call the ","type":"text"},{"code":"completionBlock","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}],"type":"paragraph"}],"name":"Note","type":"aside"},{"content":[{"inlineContent":[{"type":"text","text":"This class is "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"type":"strong","inlineContent":[{"type":"text","text":"main thread"}]},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"aside","style":"note","name":"See Also","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"BasicAnimation"},{"text":", ","type":"text"},{"code":"DecayAnimation","type":"codeVoice"},{"text":", ","type":"text"},{"code":"SpringAnimation","type":"codeVoice"},{"type":"text","text":"."}]}]}],"kind":"content"}],"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://Motion/documentation/Motion/Animation":{"navigatorTitle":[{"text":"Animation","kind":"identifier"}],"title":"Animation","role":"symbol","url":"\/documentation\/motion\/animation","identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Animation"}],"abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"type":"codeVoice","code":"Motion"},{"text":". It doesn’t do much, other than serve as a base class for all animations to inherit from and implement.","type":"text"}],"type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"title":"value","role":"symbol","url":"\/documentation\/motion\/valueanimation\/value","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"abstract":[],"type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","type":"topic","title":"ValueAnimation.ValueChangedCallback","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"ValueChangedCallback","kind":"identifier"}],"abstract":[{"type":"text","text":"A block to be called when "},{"code":"value","type":"codeVoice"},{"text":" changes.","type":"text"}],"url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","navigatorTitle":[{"text":"ValueChangedCallback","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"title":"velocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"type":"codeVoice","code":"start"},{"text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/motion\/valueanimation\/velocity","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"velocity","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}]},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onValueChanged"},{"kind":"text","text":"("},{"text":"disableActions","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"ValueAnimation","kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"kind":"symbol","type":"topic","title":"onValueChanged(disableActions:_:)","role":"symbol","abstract":[{"type":"text","text":"Call this to register a "},{"type":"codeVoice","code":"ValueChangedCallback"},{"text":" block that will be called anytime ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" changes from "},{"type":"codeVoice","code":"tick"},{"text":" or if explicitly specified via ","type":"text"},{"type":"codeVoice","code":"postValueChanged"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When called, it will give the new value that "},{"code":"value","type":"codeVoice"},{"type":"text","text":" has animated to (since the last invocation)."},{"type":"text","text":" "},{"text":"If you’re animating ","type":"text"},{"type":"codeVoice","code":"CALayer"},{"text":" objects from the block, you may supply ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" for "},{"type":"codeVoice","code":"disableActions"},{"text":" to automatically have this wrapped in a ","type":"text"},{"type":"codeVoice","code":"CATransaction"},{"type":"text","text":" that disables implicit animations for the layer."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)"},"doc://Motion/documentation/Motion/SIMDRepresentable":{"url":"\/documentation\/motion\/simdrepresentable","type":"topic","title":"SIMDRepresentable","navigatorTitle":[{"text":"SIMDRepresentable","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A protocol that defines how something that can be represented \/ stored in a "},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type as well as instantiated from said "},{"type":"codeVoice","code":"SIMD"},{"text":" type.","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMDRepresentable"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable"},"doc://Motion/documentation/Motion/ValueAnimation":{"navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"title":"ValueAnimation","role":"symbol","url":"\/documentation\/motion\/valueanimation","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"url":"\/documentation\/motion\/valueanimation\/equatable-implementations","type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","title":"Equatable Implementations","abstract":[]},"doc://Motion/documentation/Motion":{"identifier":"doc:\/\/Motion\/documentation\/Motion","kind":"symbol","role":"collection","abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"type":"topic","url":"\/documentation\/motion","title":"Motion"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"type":"topic","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvingEpsilon","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"SIMDType"},{"kind":"text","text":"."},{"text":"EpsilonType","kind":"typeIdentifier"}],"url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","role":"symbol","abstract":[{"text":"The default tolerance level for an animation to be considered finished.","type":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","title":"resolvingEpsilon"},"doc://Motion/SH":{"identifier":"doc:\/\/Motion\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://Motion/documentation/Motion/SpringAnimation":{"navigatorTitle":[{"kind":"identifier","text":"SpringAnimation"}],"title":"SpringAnimation","role":"symbol","url":"\/documentation\/motion\/springanimation","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SpringAnimation","kind":"identifier"}],"abstract":[{"type":"text","text":"This class provides the ability to animate "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" using a physically-modeled spring."}],"type":"topic"},"doc://Motion/documentation/Motion/BasicAnimation":{"navigatorTitle":[{"kind":"identifier","text":"BasicAnimation"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAnimation","kind":"identifier"}],"role":"symbol","title":"BasicAnimation","kind":"symbol","url":"\/documentation\/motion\/basicanimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on basic curves (i.e. "},{"code":"EasingFunction.easeIn","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"type":"text","text":", etc.)."}]},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"type":"topic","abstract":[{"type":"text","text":"Stops the animation immediately and preserves the last set "},{"type":"codeVoice","code":"value"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}],"title":"stop(resolveImmediately:postValueChanged:)","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"resolveImmediately"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"type":"topic","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"toValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"url":"\/documentation\/motion\/valueanimation\/tovalue","role":"symbol","abstract":[{"text":"The target value to animate towards.","type":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","title":"toValue"},"doc://Motion/documentation/Motion/DecayAnimation":{"navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"title":"DecayAnimation","role":"symbol","url":"\/documentation\/motion\/decayanimation","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"DecayAnimation","kind":"identifier"}],"abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on decay functions."}],"type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","role":"symbol","title":"updateValue(to:postValueChanged:)","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","abstract":[{"type":"text","text":"Updates "},{"code":"value","type":"codeVoice"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"updateValue","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"title":"supportsVelocity","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"supportsVelocity","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"url":"\/documentation\/motion\/valueanimation\/supportsvelocity","role":"symbol","abstract":[{"text":"Returns whether or not this class supports velocity.","type":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","type":"topic"},"doc://Motion/SQ":{"identifier":"doc:\/\/Motion\/SQ","type":"unresolvable","title":"Swift.Equatable"},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"title":"Hashable Implementations","kind":"article","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","type":"topic"}}}