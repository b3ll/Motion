{"kind":"symbol","metadata":{"symbolKind":"class","externalID":"s:6Motion14ValueAnimationC","role":"symbol","title":"ValueAnimation","modules":[{"name":"Motion"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"roleHeading":"Class","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}]},"abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"type":"codeVoice","code":"Value"},{"text":") over time.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"relationshipsSections":[{"kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"],"type":"inheritsFrom"},{"title":"Inherited By","kind":"relationships","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"type":"inheritedBy"},{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" : "},{"text":"SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP","kind":"typeIdentifier","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"The interesting part of this is the ability to have animations on the value performed simultaneously using "},{"code":"simd","type":"codeVoice"},{"text":" registers.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"i.e. a ","type":"text"},{"type":"codeVoice","code":"CGRect"},{"type":"text","text":" thatâ€™s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}]},{"inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"type":"codeVoice","code":"value"},{"type":"text","text":") and then setting a target ("},{"type":"codeVoice","code":"toValue"},{"text":") to animate to.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"type":"codeVoice","code":"completionBlock"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}]}],"name":"Note","type":"aside"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"This class is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"inlineContent":[{"text":"main thread","type":"text"}],"type":"strong"},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}],"type":"paragraph"}]},{"name":"See Also","content":[{"inlineContent":[{"type":"text","text":""},{"code":"BasicAnimation","type":"codeVoice"},{"type":"text","text":", "},{"code":"DecayAnimation","type":"codeVoice"},{"type":"text","text":", "},{"code":"SpringAnimation","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/motion\/valueanimation"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"sections":[],"topicSections":[{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"],"title":"Instance Properties"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"],"title":"Type Aliases"},{"title":"Type Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"generated":true,"title":"Default Implementations"}],"references":{"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","abstract":[{"type":"text","text":"Updates "},{"code":"value","type":"codeVoice"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","title":"updateValue(to:postValueChanged:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"updateValue","kind":"identifier"},{"kind":"text","text":"("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"},"doc://Motion/documentation/Motion/BasicAnimation":{"role":"symbol","url":"\/documentation\/motion\/basicanimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicAnimation"}],"navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on basic curves (i.e. "},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"type":"text","text":", "},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"text":", etc.).","type":"text"}],"title":"BasicAnimation"},"doc://Motion/documentation/Motion":{"abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"role":"collection","url":"\/documentation\/motion","kind":"symbol","title":"Motion","identifier":"doc:\/\/Motion\/documentation\/Motion","type":"topic"},"doc://Motion/documentation/Motion/DecayAnimation":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DecayAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/decayanimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DecayAnimation"}],"title":"DecayAnimation","role":"symbol","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"text":" based on decay functions.","type":"text"}]},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"toValue","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"type":"topic","title":"toValue","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","abstract":[{"text":"The target value to animate towards.","type":"text"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/tovalue"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"kind":"symbol","title":"stop(resolveImmediately:postValueChanged:)","abstract":[{"type":"text","text":"Stops the animation immediately and preserves the last set "},{"type":"codeVoice","code":"value"},{"text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched.","type":"text"}],"url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","role":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"stop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"resolveImmediately"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"postValueChanged"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}]},"doc://Motion/documentation/Motion/ValueAnimation":{"kind":"symbol","role":"symbol","abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"type":"codeVoice","code":"Value"},{"text":") over time.","type":"text"}],"url":"\/documentation\/motion\/valueanimation","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","type":"topic","title":"ValueAnimation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ValueAnimation","kind":"identifier"}]},"doc://Motion/documentation/Motion/SIMDRepresentable":{"abstract":[{"text":"A protocol that defines how something that can be represented \/ stored in a ","type":"text"},{"type":"codeVoice","code":"SIMD"},{"type":"text","text":" type as well as instantiated from said "},{"type":"codeVoice","code":"SIMD"},{"type":"text","text":" type."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMDRepresentable"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDRepresentable"}],"url":"\/documentation\/motion\/simdrepresentable","title":"SIMDRepresentable","type":"topic"},"doc://Motion/documentation/Motion/SpringAnimation":{"type":"topic","navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SpringAnimation"}],"abstract":[{"text":"This class provides the ability to animate ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":" using a physically-modeled spring.","type":"text"}],"kind":"symbol","title":"SpringAnimation","url":"\/documentation\/motion\/springanimation"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"abstract":[],"role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","title":"Equatable Implementations","url":"\/documentation\/motion\/valueanimation\/equatable-implementations"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueChangedCallback"}],"type":"topic","title":"ValueAnimation.ValueChangedCallback","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","abstract":[{"text":"A block to be called when ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes."}],"navigatorTitle":[{"kind":"identifier","text":"ValueChangedCallback"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback"},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"url":"\/documentation\/motion\/valueanimation\/supportsvelocity","abstract":[{"type":"text","text":"Returns whether or not this class supports velocity."}],"type":"topic","title":"supportsVelocity","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"supportsVelocity"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"kind":"symbol","role":"symbol","abstract":[],"url":"\/documentation\/motion\/valueanimation\/value","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","type":"topic","title":"value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}]},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"onValueChanged","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"disableActions"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"ValueAnimation","preciseIdentifier":"s:6Motion14ValueAnimationC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","text":"ValueChangedCallback"},{"text":"?)","kind":"text"}],"type":"topic","title":"onValueChanged(disableActions:_:)","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","abstract":[{"type":"text","text":"Call this to register a "},{"type":"codeVoice","code":"ValueChangedCallback"},{"type":"text","text":" block that will be called anytime "},{"type":"codeVoice","code":"value"},{"text":" changes from ","type":"text"},{"type":"codeVoice","code":"tick"},{"type":"text","text":" or if explicitly specified via "},{"type":"codeVoice","code":"postValueChanged"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When called, it will give the new value that "},{"type":"codeVoice","code":"value"},{"type":"text","text":" has animated to (since the last invocation)."},{"type":"text","text":" "},{"type":"text","text":"If youâ€™re animating "},{"type":"codeVoice","code":"CALayer"},{"type":"text","text":" objects from the block, you may supply "},{"type":"codeVoice","code":"true"},{"text":" for ","type":"text"},{"code":"disableActions","type":"codeVoice"},{"type":"text","text":" to automatically have this wrapped in a "},{"type":"codeVoice","code":"CATransaction"},{"text":" that disables implicit animations for the layer.","type":"text"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"velocity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/velocity","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","abstract":[{"text":"The velocity of the animation. Setting this before calling ","type":"text"},{"type":"codeVoice","code":"start"},{"type":"text","text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time."}],"role":"symbol","title":"velocity"},"doc://Motion/documentation/Motion/Animation":{"url":"\/documentation\/motion\/animation","type":"topic","title":"Animation","abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"code":"Motion","type":"codeVoice"},{"type":"text","text":". It doesnâ€™t do much, other than serve as a base class for all animations to inherit from and implement."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Animation"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Animation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation"},"doc://Motion/SQ":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"kind":"symbol","title":"resolvingEpsilon","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}],"url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","role":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolvingEpsilon"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SIMDType"},{"text":".","kind":"text"},{"text":"EpsilonType","kind":"typeIdentifier"}]},"doc://Motion/SH":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SH","title":"Swift.Hashable"},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"kind":"article","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","title":"Hashable Implementations","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","role":"collectionGroup","abstract":[],"type":"topic"}}}