{"relationshipsSections":[{"title":"Inherits From","type":"inheritsFrom","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"],"kind":"relationships"},{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"type":"inheritedBy"},{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"],"title":"Conforms To"}],"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"],"title":"Instance Properties"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"title":"Instance Methods"},{"title":"Type Aliases","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"],"title":"Type Properties"},{"title":"Default Implementations","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"generated":true}],"metadata":{"navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"roleHeading":"Class","title":"ValueAnimation","symbolKind":"class","role":"symbol","modules":[{"name":"Motion"}],"externalID":"s:6Motion14ValueAnimationC","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}]},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAnimation"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"typeIdentifier","text":"SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP"}]}]},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"code":"simd","type":"codeVoice"},{"type":"text","text":" registers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. a "},{"code":"CGRect","type":"codeVoice"},{"type":"text","text":" thatâ€™s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}]},{"inlineContent":[{"text":"This is normally accomplished by setting an initial state for the animation (","type":"text"},{"code":"value","type":"codeVoice"},{"text":") and then setting a target (","type":"text"},{"type":"codeVoice","code":"toValue"},{"text":") to animate to.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"type":"codeVoice","code":"onValueChanged"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"type":"codeVoice","code":"completionBlock"},{"type":"text","text":"."}]},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used.","type":"text"}],"type":"paragraph"}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This class is "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"inlineContent":[{"type":"text","text":"main thread"}],"type":"strong"},{"text":" only (much like any AppKit \/ UIKit operations should be main threaded).","type":"text"}]}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"BasicAnimation"},{"type":"text","text":", "},{"code":"DecayAnimation","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"SpringAnimation"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"See Also"}],"kind":"content"}],"kind":"symbol","sections":[],"references":{"doc://Motion/documentation/Motion/SIMDRepresentable":{"title":"SIMDRepresentable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SIMDRepresentable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A protocol that defines how something that can be represented \/ stored in a "},{"type":"codeVoice","code":"SIMD"},{"type":"text","text":" type as well as instantiated from said "},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type."}],"navigatorTitle":[{"text":"SIMDRepresentable","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","url":"\/documentation\/motion\/simdrepresentable","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"navigatorTitle":[{"text":"ValueChangedCallback","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A block to be called when "},{"code":"value","type":"codeVoice"},{"text":" changes.","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueChangedCallback"}],"kind":"symbol","title":"ValueAnimation.ValueChangedCallback","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","kind":"symbol","title":"value","role":"symbol","url":"\/documentation\/motion\/valueanimation\/value","abstract":[],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"type":"topic"},"doc://Motion/documentation/Motion":{"url":"\/documentation\/motion","type":"topic","kind":"symbol","title":"Motion","abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"identifier":"doc:\/\/Motion\/documentation\/Motion","role":"collection"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"title":"resolvingEpsilon","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"resolvingEpsilon","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SIMDType"},{"text":".","kind":"text"},{"text":"EpsilonType","kind":"typeIdentifier"}],"type":"topic","role":"symbol","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"url":"\/documentation\/motion\/valueanimation\/tovalue","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","title":"toValue","type":"topic","kind":"symbol","abstract":[{"text":"The target value to animate towards.","type":"text"}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"toValue"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}]},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"abstract":[{"text":"Returns whether or not this class supports velocity.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"supportsVelocity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","title":"supportsVelocity","url":"\/documentation\/motion\/valueanimation\/supportsvelocity","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onValueChanged","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"disableActions"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:6Motion14ValueAnimationC","text":"ValueAnimation","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"abstract":[{"text":"Call this to register a ","type":"text"},{"type":"codeVoice","code":"ValueChangedCallback"},{"type":"text","text":" block that will be called anytime "},{"type":"codeVoice","code":"value"},{"text":" changes from ","type":"text"},{"code":"tick","type":"codeVoice"},{"type":"text","text":" or if explicitly specified via "},{"type":"codeVoice","code":"postValueChanged"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When called, it will give the new value that "},{"code":"value","type":"codeVoice"},{"text":" has animated to (since the last invocation).","type":"text"},{"text":" ","type":"text"},{"text":"If youâ€™re animating ","type":"text"},{"code":"CALayer","type":"codeVoice"},{"text":" objects from the block, you may supply ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" for "},{"code":"disableActions","type":"codeVoice"},{"type":"text","text":" to automatically have this wrapped in a "},{"code":"CATransaction","type":"codeVoice"},{"type":"text","text":" that disables implicit animations for the layer."}],"kind":"symbol","role":"symbol","type":"topic","title":"onValueChanged(disableActions:_:)"},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"title":"Hashable Implementations","abstract":[],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","kind":"article"},"doc://Motion/documentation/Motion/ValueAnimation":{"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAnimation"}],"title":"ValueAnimation","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"type":"topic","role":"symbol","url":"\/documentation\/motion\/valueanimation"},"doc://Motion/documentation/Motion/DecayAnimation":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecayAnimation"}],"kind":"symbol","title":"DecayAnimation","navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/decayanimation","abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" based on decay functions."}]},"doc://Motion/SQ":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable"},"doc://Motion/documentation/Motion/Animation":{"url":"\/documentation\/motion\/animation","kind":"symbol","abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"code":"Motion","type":"codeVoice"},{"text":". It doesnâ€™t do much, other than serve as a base class for all animations to inherit from and implement.","type":"text"}],"title":"Animation","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Animation","kind":"identifier"}],"navigatorTitle":[{"text":"Animation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","role":"symbol","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","abstract":[{"type":"text","text":"Updates "},{"type":"codeVoice","code":"value"},{"type":"text","text":" to the supplied value and optionally invokes "},{"type":"codeVoice","code":"onValueChanged"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"updateValue","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"title":"updateValue(to:postValueChanged:)","type":"topic","kind":"symbol"},"doc://Motion/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Motion\/SH"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"title":"Equatable Implementations","kind":"article","abstract":[],"type":"topic","url":"\/documentation\/motion\/valueanimation\/equatable-implementations","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","role":"collectionGroup"},"doc://Motion/documentation/Motion/SpringAnimation":{"url":"\/documentation\/motion\/springanimation","navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SpringAnimation","kind":"identifier"}],"kind":"symbol","title":"SpringAnimation","abstract":[{"type":"text","text":"This class provides the ability to animate "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" using a physically-modeled spring."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","role":"symbol"},"doc://Motion/documentation/Motion/BasicAnimation":{"abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" based on basic curves (i.e. "},{"code":"EasingFunction.easeIn","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"type":"text","text":", etc.)."}],"title":"BasicAnimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"BasicAnimation","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/basicanimation"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"role":"symbol","abstract":[{"text":"Stops the animation immediately and preserves the last set ","type":"text"},{"code":"value","type":"codeVoice"},{"text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"stop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"resolveImmediately"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","title":"stop(resolveImmediately:postValueChanged:)"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"title":"velocity","abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"code":"start","type":"codeVoice"},{"type":"text","text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"velocity"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"type":"topic","role":"symbol","url":"\/documentation\/motion\/valueanimation\/velocity","kind":"symbol"}}}