{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP","text":"SIMDRepresentable"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"code":"simd","type":"codeVoice"},{"type":"text","text":" registers."}]},{"inlineContent":[{"type":"text","text":"i.e. a "},{"code":"CGRect","type":"codeVoice"},{"text":" thatâ€™s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"type":"codeVoice","code":"value"},{"text":") and then setting a target (","type":"text"},{"type":"codeVoice","code":"toValue"},{"type":"text","text":") to animate to."}],"type":"paragraph"},{"inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"If you wish to update the value manually, you may also do so via ","type":"text"},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"When resolved, this class will optionally call the ","type":"text"},{"code":"completionBlock","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}]}],"type":"aside"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This class is "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"inlineContent":[{"type":"text","text":"main thread"}],"type":"strong"},{"text":" only (much like any AppKit \/ UIKit operations should be main threaded).","type":"text"}]}],"style":"note","name":"Note"},{"name":"See Also","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"BasicAnimation"},{"type":"text","text":", "},{"code":"DecayAnimation","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"SpringAnimation"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"content"}],"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"modules":[{"name":"Motion"}],"role":"symbol","externalID":"s:6Motion14ValueAnimationC","roleHeading":"Class","symbolKind":"class","title":"ValueAnimation","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"topicSections":[{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"anchor":"Instance-Methods","title":"Instance Methods"},{"anchor":"Type-Aliases","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"],"title":"Type Aliases","generated":true},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"],"title":"Type Properties","generated":true,"anchor":"Type-Properties"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations","generated":true}],"sections":[],"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"relationshipsSections":[{"kind":"relationships","title":"Inherits From","type":"inheritsFrom","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"]},{"title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"kind":"relationships"},{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/Motion\/s8CopyableP","doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH","doc:\/\/Motion\/s8SendableP"]}],"identifier":{"url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Motion/documentation/Motion/ValueAnimation":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAnimation"}],"navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"title":"ValueAnimation","abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":") over time."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/motion\/valueanimation"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","type":"topic","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","role":"symbol","title":"updateValue(to:postValueChanged:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"updateValue"},{"kind":"text","text":"("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[{"text":"Updates ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" to the supplied value and optionally invokes "},{"code":"onValueChanged","type":"codeVoice"},{"text":".","type":"text"}]},"doc://Motion/documentation/Motion/DecayAnimation":{"navigatorTitle":[{"kind":"identifier","text":"DecayAnimation"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecayAnimation"}],"abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" based on decay functions.","type":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","url":"\/documentation\/motion\/decayanimation","type":"topic","role":"symbol","title":"DecayAnimation"},"doc://Motion/documentation/Motion/SpringAnimation":{"role":"symbol","navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}],"type":"topic","abstract":[{"text":"This class provides the ability to animate ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" using a physically-modeled spring.","type":"text"}],"url":"\/documentation\/motion\/springanimation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"SpringAnimation","kind":"identifier"}],"title":"SpringAnimation","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"navigatorTitle":[{"kind":"identifier","text":"ValueChangedCallback"}],"role":"symbol","abstract":[{"text":"A block to be called when ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" changes."}],"title":"ValueAnimation.ValueChangedCallback","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","type":"topic","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueChangedCallback"}]},"doc://Motion/documentation/Motion/SIMDRepresentable":{"kind":"symbol","role":"symbol","url":"\/documentation\/motion\/simdrepresentable","type":"topic","title":"SIMDRepresentable","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SIMDRepresentable","kind":"identifier"}],"navigatorTitle":[{"text":"SIMDRepresentable","kind":"identifier"}],"abstract":[{"type":"text","text":"A protocol that defines how something that can be represented \/ stored in a "},{"code":"SIMD","type":"codeVoice"},{"text":" type as well as instantiated from said ","type":"text"},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type."}]},"doc://Motion/documentation/Motion":{"kind":"symbol","title":"Motion","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion","abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"role":"collection","url":"\/documentation\/motion"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","type":"topic","url":"\/documentation\/motion\/valueanimation\/tovalue","role":"symbol","title":"toValue","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"toValue"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The target value to animate towards."}]},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"role":"collectionGroup","abstract":[],"title":"Equatable Implementations","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","type":"topic","kind":"article","url":"\/documentation\/motion\/valueanimation\/equatable-implementations"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","type":"topic","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","role":"symbol","title":"stop(resolveImmediately:postValueChanged:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stop"},{"kind":"text","text":"("},{"kind":"externalParam","text":"resolveImmediately"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Stops the animation immediately and preserves the last set "},{"type":"codeVoice","code":"value"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}]},"doc://Motion/documentation/Motion/BasicAnimation":{"url":"\/documentation\/motion\/basicanimation","type":"topic","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on basic curves (i.e. "},{"code":"EasingFunction.easeIn","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"text":", etc.).","type":"text"}],"role":"symbol","title":"BasicAnimation","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAnimation","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BasicAnimation"}]},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"supportsVelocity","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","url":"\/documentation\/motion\/valueanimation\/supportsvelocity","role":"symbol","abstract":[{"type":"text","text":"Returns whether or not this class supports velocity."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","title":"supportsVelocity","kind":"symbol"},"doc://Motion/SQ":{"identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://Motion/s8SendableP":{"identifier":"doc:\/\/Motion\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"abstract":[{"text":"The velocity of the animation. Setting this before calling ","type":"text"},{"code":"start","type":"codeVoice"},{"type":"text","text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time."}],"title":"velocity","url":"\/documentation\/motion\/valueanimation\/velocity","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"velocity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}]},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"role":"symbol","abstract":[{"type":"text","text":"Call this to register a "},{"type":"codeVoice","code":"ValueChangedCallback"},{"type":"text","text":" block that will be called anytime "},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes from "},{"code":"tick","type":"codeVoice"},{"text":" or if explicitly specified via ","type":"text"},{"type":"codeVoice","code":"postValueChanged"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When called, it will give the new value that "},{"type":"codeVoice","code":"value"},{"text":" has animated to (since the last invocation).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If youâ€™re animating "},{"code":"CALayer","type":"codeVoice"},{"type":"text","text":" objects from the block, you may supply "},{"type":"codeVoice","code":"true"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"disableActions"},{"type":"text","text":" to automatically have this wrapped in a "},{"type":"codeVoice","code":"CATransaction"},{"type":"text","text":" that disables implicit animations for the layer."}],"title":"onValueChanged(disableActions:_:)","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","type":"topic","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onValueChanged"},{"text":"(","kind":"text"},{"text":"disableActions","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"ValueAnimation","kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">."},{"preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier","text":"ValueChangedCallback"},{"kind":"text","text":"?)"}]},"doc://Motion/documentation/Motion/Animation":{"kind":"symbol","type":"topic","abstract":[{"text":"This class acts as the base class for all animations within ","type":"text"},{"code":"Motion","type":"codeVoice"},{"type":"text","text":". It doesnâ€™t do much, other than serve as a base class for all animations to inherit from and implement."}],"role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Animation","kind":"identifier"}],"url":"\/documentation\/motion\/animation","navigatorTitle":[{"kind":"identifier","text":"Animation"}],"title":"Animation"},"doc://Motion/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/Motion\/s8CopyableP","title":"Swift.Copyable"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"role":"symbol","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}],"title":"resolvingEpsilon","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","type":"topic","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"resolvingEpsilon","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SIMDType","kind":"typeIdentifier","preciseIdentifier":"s:6Motion17SIMDRepresentableP8SIMDTypeQa"},{"text":".","kind":"text"},{"preciseIdentifier":"s:6Motion15EquatableEnoughP11EpsilonTypeQa","kind":"typeIdentifier","text":"EpsilonType"}]},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","type":"topic","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","role":"collectionGroup","title":"Hashable Implementations","kind":"article","abstract":[]},"doc://Motion/documentation/Motion/ValueAnimation/value":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"url":"\/documentation\/motion\/valueanimation\/value","title":"value","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","type":"topic"},"doc://Motion/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Motion\/SH"}}}