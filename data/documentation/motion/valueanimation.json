{"relationshipsSections":[{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"],"type":"inheritsFrom","kind":"relationships","title":"Inherits From"},{"kind":"relationships","title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"]},{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"]}],"identifier":{"url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"]},{"title":"Instance Methods","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"]},{"title":"Type Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"generated":true,"title":"Default Implementations"}],"kind":"symbol","abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"text":") over time.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAnimation"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"SIMDRepresentable","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"type":"codeVoice","code":"simd"},{"text":" registers.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. a "},{"type":"codeVoice","code":"CGRect"},{"type":"text","text":" thatâ€™s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}]},{"type":"paragraph","inlineContent":[{"text":"This is normally accomplished by setting an initial state for the animation (","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":") and then setting a target ("},{"type":"codeVoice","code":"toValue"},{"type":"text","text":") to animate to."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This class, when ticked, will change a value and emit changes to that value via "},{"type":"codeVoice","code":"onValueChanged"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"When resolved, this class will optionally call the ","type":"text"},{"code":"completionBlock","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used.","type":"text"}]}]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"This class is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"text":" thread-safe. It is meant to be run on the ","type":"text"},{"inlineContent":[{"type":"text","text":"main thread"}],"type":"strong"},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}],"type":"paragraph"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"code":"BasicAnimation","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"DecayAnimation"},{"text":", ","type":"text"},{"type":"codeVoice","code":"SpringAnimation"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","name":"See Also"}]}],"metadata":{"roleHeading":"Class","modules":[{"name":"Motion"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"externalID":"s:6Motion14ValueAnimationC","symbolKind":"class","title":"ValueAnimation"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"references":{"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvingEpsilon"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SIMDType"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"EpsilonType"}],"url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","type":"topic","role":"symbol","kind":"symbol","title":"resolvingEpsilon","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}]},"doc://Motion/documentation/Motion/ValueAnimation":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":") over time."}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation","title":"ValueAnimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","type":"topic"},"doc://Motion/SQ":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable"},"doc://Motion/documentation/Motion/BasicAnimation":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","url":"\/documentation\/motion\/basicanimation","role":"symbol","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"text":" based on basic curves (i.e. ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"text":", ","type":"text"},{"code":"EasingFunction.easeInOut","type":"codeVoice"},{"text":", etc.).","type":"text"}],"kind":"symbol","title":"BasicAnimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAnimation","kind":"identifier"}],"navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","title":"toValue","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"toValue","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"text":"The target value to animate towards.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/motion\/valueanimation\/tovalue"},"doc://Motion/SH":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SH","title":"Swift.Hashable"},"doc://Motion/documentation/Motion/SpringAnimation":{"title":"SpringAnimation","abstract":[{"text":"This class provides the ability to animate ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" using a physically-modeled spring."}],"type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SpringAnimation"}],"role":"symbol","kind":"symbol","url":"\/documentation\/motion\/springanimation","navigatorTitle":[{"kind":"identifier","text":"SpringAnimation"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"},"doc://Motion/documentation/Motion/SIMDRepresentable":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","abstract":[{"text":"A protocol that defines how something that can be represented \/ stored in a ","type":"text"},{"type":"codeVoice","code":"SIMD"},{"text":" type as well as instantiated from said ","type":"text"},{"code":"SIMD","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMDRepresentable"}],"role":"symbol","kind":"symbol","url":"\/documentation\/motion\/simdrepresentable","navigatorTitle":[{"kind":"identifier","text":"SIMDRepresentable"}],"title":"SIMDRepresentable"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"abstract":[{"type":"text","text":"Call this to register a "},{"code":"ValueChangedCallback","type":"codeVoice"},{"text":" block that will be called anytime ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" changes from "},{"code":"tick","type":"codeVoice"},{"type":"text","text":" or if explicitly specified via "},{"type":"codeVoice","code":"postValueChanged"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"When called, it will give the new value that ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" has animated to (since the last invocation)."},{"type":"text","text":" "},{"text":"If youâ€™re animating ","type":"text"},{"code":"CALayer","type":"codeVoice"},{"text":" objects from the block, you may supply ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" for ","type":"text"},{"code":"disableActions","type":"codeVoice"},{"text":" to automatically have this wrapped in a ","type":"text"},{"type":"codeVoice","code":"CATransaction"},{"text":" that disables implicit animations for the layer.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onValueChanged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"disableActions","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ValueAnimation","kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka"},{"text":"?)","kind":"text"}],"url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","type":"topic","title":"onValueChanged(disableActions:_:)","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"type":"topic","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","title":"Hashable Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","role":"collectionGroup"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"title":"value","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/value","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Updates "},{"type":"codeVoice","code":"value"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"type":"codeVoice","code":"onValueChanged"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","title":"updateValue(to:postValueChanged:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"updateValue"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}]},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","type":"topic","abstract":[{"type":"text","text":"Stops the animation immediately and preserves the last set "},{"type":"codeVoice","code":"value"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}],"kind":"symbol","role":"symbol","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","title":"stop(resolveImmediately:postValueChanged:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"stop"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"resolveImmediately"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}]},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","type":"topic","kind":"symbol","abstract":[{"text":"Returns whether or not this class supports velocity.","type":"text"}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/supportsvelocity","title":"supportsVelocity","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"supportsVelocity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","type":"topic","abstract":[{"type":"text","text":"A block to be called when "},{"type":"codeVoice","code":"value"},{"text":" changes.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ValueChangedCallback"}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","title":"ValueAnimation.ValueChangedCallback","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueChangedCallback"}]},"doc://Motion/documentation/Motion/Animation":{"kind":"symbol","abstract":[{"text":"This class acts as the base class for all animations within ","type":"text"},{"type":"codeVoice","code":"Motion"},{"text":". It doesnâ€™t do much, other than serve as a base class for all animations to inherit from and implement.","type":"text"}],"navigatorTitle":[{"text":"Animation","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","url":"\/documentation\/motion\/animation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Animation"}],"title":"Animation"},"doc://Motion/documentation/Motion":{"identifier":"doc:\/\/Motion\/documentation\/Motion","type":"topic","kind":"symbol","role":"collection","title":"Motion","abstract":[{"type":"image","identifier":"Motion-Logo-Rendered"}],"url":"\/documentation\/motion"},"doc://Motion/documentation/Motion/DecayAnimation":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"title":"DecayAnimation","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecayAnimation"}],"abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" based on decay functions."}],"kind":"symbol","role":"symbol","url":"\/documentation\/motion\/decayanimation"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"kind":"article","url":"\/documentation\/motion\/valueanimation\/equatable-implementations","title":"Equatable Implementations","type":"topic","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"velocity","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"code":"start","type":"codeVoice"},{"text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time.","type":"text"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/velocity","title":"velocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","type":"topic"}}}