{"sections":[],"identifier":{"url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"kind":"attribute","preciseIdentifier":"s:ScM","text":"MainActor"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"SIMDRepresentable","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"typeIdentifier","preciseIdentifier":"s:6Motion17SIMDRepresentableP"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"type":"codeVoice","code":"simd"},{"type":"text","text":" registers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. a "},{"type":"codeVoice","code":"CGRect"},{"type":"text","text":" that’s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}]},{"inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"type":"codeVoice","code":"value"},{"text":") and then setting a target (","type":"text"},{"type":"codeVoice","code":"toValue"},{"text":") to animate to.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This class, when ticked, will change a value and emit changes to that value via "},{"code":"onValueChanged","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"code":"completionBlock","type":"codeVoice"},{"text":".","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}]}],"name":"Note"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"This class is "},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"type":"strong","inlineContent":[{"type":"text","text":"main thread"}]},{"text":" only (much like any AppKit \/ UIKit operations should be main threaded).","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"content":[{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"BasicAnimation"},{"text":", ","type":"text"},{"type":"codeVoice","code":"DecayAnimation"},{"text":", ","type":"text"},{"type":"codeVoice","code":"SpringAnimation"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note","name":"See Also"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"role":"symbol","modules":[{"name":"Motion"}],"externalID":"s:6Motion14ValueAnimationC","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"title":"ValueAnimation","symbolKind":"class"},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":") over time."}],"topicSections":[{"title":"Instance Properties","generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"],"anchor":"Instance-Properties"},{"anchor":"Instance-Methods","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"title":"Instance Methods","generated":true},{"anchor":"Type-Aliases","title":"Type Aliases","generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"]},{"anchor":"Type-Properties","generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"],"title":"Type Properties"},{"generated":true,"anchor":"Default-Implementations","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"title":"Default Implementations"}],"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"]},{"title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"kind":"relationships"},{"identifiers":["doc:\/\/Motion\/s8CopyableP","doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH","doc:\/\/Motion\/s8SendableP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/motion\/valueanimation"]}],"kind":"symbol","references":{"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"type":"topic","abstract":[],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","kind":"article","url":"\/documentation\/motion\/valueanimation\/equatable-implementations","role":"collectionGroup","title":"Equatable Implementations"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"type":"topic","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","abstract":[{"text":"A block to be called when ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes."}],"role":"symbol","kind":"symbol","title":"ValueAnimation.ValueChangedCallback","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueChangedCallback"}],"navigatorTitle":[{"kind":"identifier","text":"ValueChangedCallback"}]},"doc://Motion/documentation/Motion/Animation":{"title":"Animation","role":"symbol","type":"topic","navigatorTitle":[{"text":"Animation","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"type":"codeVoice","code":"Motion"},{"text":". It doesn’t do much, other than serve as a base class for all animations to inherit from and implement.","type":"text"}],"url":"\/documentation\/motion\/animation","identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Animation"}]},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stop","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"resolveImmediately"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","title":"stop(resolveImmediately:postValueChanged:)","type":"topic","abstract":[{"type":"text","text":"Stops the animation immediately and preserves the last set "},{"code":"value","type":"codeVoice"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","kind":"symbol","title":"velocity","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"velocity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"type":"codeVoice","code":"start"},{"text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time.","type":"text"}],"url":"\/documentation\/motion\/valueanimation\/velocity"},"doc://Motion/documentation/Motion/SIMDRepresentable":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDRepresentable"}],"kind":"symbol","title":"SIMDRepresentable","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDRepresentable"}],"abstract":[{"text":"A protocol that defines how something that can be represented \/ stored in a ","type":"text"},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type as well as instantiated from said "},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type."}],"url":"\/documentation\/motion\/simdrepresentable"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"role":"symbol","kind":"symbol","title":"onValueChanged(disableActions:_:)","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onValueChanged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"disableActions","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ValueAnimation","kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","text":"ValueChangedCallback","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"abstract":[{"text":"Call this to register a ","type":"text"},{"type":"codeVoice","code":"ValueChangedCallback"},{"type":"text","text":" block that will be called anytime "},{"type":"codeVoice","code":"value"},{"text":" changes from ","type":"text"},{"type":"codeVoice","code":"tick"},{"type":"text","text":" or if explicitly specified via "},{"code":"postValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"When called, it will give the new value that "},{"code":"value","type":"codeVoice"},{"text":" has animated to (since the last invocation).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you’re animating "},{"type":"codeVoice","code":"CALayer"},{"text":" objects from the block, you may supply ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" for "},{"code":"disableActions","type":"codeVoice"},{"text":" to automatically have this wrapped in a ","type":"text"},{"code":"CATransaction","type":"codeVoice"},{"text":" that disables implicit animations for the layer.","type":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","type":"topic"},"doc://Motion/s8SendableP":{"identifier":"doc:\/\/Motion\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvingEpsilon","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:6Motion17SIMDRepresentableP8SIMDTypeQa","text":"SIMDType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"EpsilonType","kind":"typeIdentifier","preciseIdentifier":"s:6Motion15EquatableEnoughP11EpsilonTypeQa"}],"role":"symbol","title":"resolvingEpsilon","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","type":"topic","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}]},"doc://Motion/SQ":{"identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation":{"type":"topic","abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"code":"Value","type":"codeVoice"},{"text":") over time.","type":"text"}],"url":"\/documentation\/motion\/valueanimation","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"title":"ValueAnimation","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}]},"doc://Motion/s8CopyableP":{"identifier":"doc:\/\/Motion\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://Motion/documentation/Motion/DecayAnimation":{"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"DecayAnimation","kind":"identifier"}],"navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/decayanimation","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" based on decay functions."}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","title":"DecayAnimation"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"title":"value","abstract":[],"type":"topic","url":"\/documentation\/motion\/valueanimation\/value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","kind":"symbol","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","title":"updateValue(to:postValueChanged:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"updateValue","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Updates "},{"type":"codeVoice","code":"value"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."}]},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"title":"Hashable Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/motion\/valueanimation\/hashable-implementations"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"title":"toValue","abstract":[{"type":"text","text":"The target value to animate towards."}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/tovalue","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","kind":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"toValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}]},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"title":"supportsVelocity","abstract":[{"text":"Returns whether or not this class supports velocity.","type":"text"}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/supportsvelocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"supportsVelocity","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}]},"doc://Motion/documentation/Motion/BasicAnimation":{"title":"BasicAnimation","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"BasicAnimation","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/basicanimation","type":"topic","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"text":" based on basic curves (i.e. ","type":"text"},{"code":"EasingFunction.easeIn","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"type":"text","text":", etc.)."}],"role":"symbol"},"doc://Motion/SH":{"identifier":"doc:\/\/Motion\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://Motion/documentation/Motion":{"title":"Motion","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion","url":"\/documentation\/motion","type":"topic","abstract":[{"type":"image","identifier":"Motion-Logo-Rendered"}],"role":"collection"},"doc://Motion/documentation/Motion/SpringAnimation":{"title":"SpringAnimation","kind":"symbol","url":"\/documentation\/motion\/springanimation","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SpringAnimation","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SpringAnimation"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","abstract":[{"type":"text","text":"This class provides the ability to animate "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" using a physically-modeled spring."}]}}}