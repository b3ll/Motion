{"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:6Motion14ValueAnimationC","modules":[{"name":"Motion"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ValueAnimation","kind":"identifier"}],"symbolKind":"class","title":"ValueAnimation","role":"symbol","roleHeading":"Class","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"text":" ","kind":"text"},{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP","kind":"typeIdentifier","text":"SIMDRepresentable"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"type":"codeVoice","code":"simd"},{"type":"text","text":" registers."}],"type":"paragraph"},{"inlineContent":[{"text":"i.e. a ","type":"text"},{"type":"codeVoice","code":"CGRect"},{"type":"text","text":" that’s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"type":"codeVoice","code":"value"},{"type":"text","text":") and then setting a target ("},{"type":"codeVoice","code":"toValue"},{"type":"text","text":") to animate to."}]},{"type":"paragraph","inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"type":"codeVoice","code":"onValueChanged"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"If you wish to update the value manually, you may also do so via ","type":"text"},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"code":"completionBlock","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"This class is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"text":" thread-safe. It is meant to be run on the ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"main thread"}]},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}],"type":"paragraph"}]},{"name":"See Also","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"},{"code":"BasicAnimation","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"DecayAnimation"},{"type":"text","text":", "},{"type":"codeVoice","code":"SpringAnimation"},{"type":"text","text":"."}],"type":"paragraph"}]}]}],"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"],"type":"inheritsFrom","kind":"relationships"},{"kind":"relationships","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"title":"Inherited By"},{"type":"conformsTo","identifiers":["doc:\/\/Motion\/s8CopyableP","doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH","doc:\/\/Motion\/s8SendableP"],"kind":"relationships","title":"Conforms To"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"topicSections":[{"anchor":"Instance-Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"],"title":"Instance Properties","generated":true},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"generated":true,"title":"Instance Methods","anchor":"Instance-Methods"},{"anchor":"Type-Aliases","generated":true,"title":"Type Aliases","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"]},{"anchor":"Type-Properties","title":"Type Properties","generated":true,"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"type":"topic","navigatorTitle":[{"text":"ValueChangedCallback","kind":"identifier"}],"abstract":[{"text":"A block to be called when ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" changes.","type":"text"}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","kind":"symbol","title":"ValueAnimation.ValueChangedCallback","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ValueChangedCallback","kind":"identifier"}]},"doc://Motion/documentation/Motion/Animation":{"abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"code":"Motion","type":"codeVoice"},{"text":". It doesn’t do much, other than serve as a base class for all animations to inherit from and implement.","type":"text"}],"navigatorTitle":[{"text":"Animation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","type":"topic","title":"Animation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Animation","kind":"identifier"}],"url":"\/documentation\/motion\/animation","role":"symbol","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","title":"toValue","abstract":[{"type":"text","text":"The target value to animate towards."}],"url":"\/documentation\/motion\/valueanimation\/tovalue","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"toValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://Motion/s8SendableP":{"identifier":"doc:\/\/Motion\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"title":"resolvingEpsilon","role":"symbol","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvingEpsilon","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:6Motion17SIMDRepresentableP8SIMDTypeQa","kind":"typeIdentifier","text":"SIMDType"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:6Motion15EquatableEnoughP11EpsilonTypeQa","text":"EpsilonType"}],"type":"topic","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","role":"collectionGroup","url":"\/documentation\/motion\/valueanimation\/equatable-implementations","abstract":[],"kind":"article","title":"Equatable Implementations","type":"topic"},"doc://Motion/documentation/Motion/BasicAnimation":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BasicAnimation"}],"abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on basic curves (i.e. "},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"text":", ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"type":"text","text":", etc.)."}],"navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/basicanimation","title":"BasicAnimation","type":"topic","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","role":"symbol"},"doc://Motion/SQ":{"identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","abstract":[],"type":"topic","kind":"symbol","title":"value","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"url":"\/documentation\/motion\/valueanimation\/value","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"url":"\/documentation\/motion\/valueanimation\/hashable-implementations","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","title":"Hashable Implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article"},"doc://Motion/documentation/Motion/ValueAnimation":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","title":"ValueAnimation","abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"type":"codeVoice","code":"Value"},{"text":") over time.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAnimation"}],"type":"topic","url":"\/documentation\/motion\/valueanimation","role":"symbol"},"doc://Motion/documentation/Motion":{"title":"Motion","type":"topic","role":"collection","abstract":[{"type":"image","identifier":"Motion-Logo-Rendered"}],"identifier":"doc:\/\/Motion\/documentation\/Motion","url":"\/documentation\/motion","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"type":"topic","abstract":[{"type":"text","text":"Updates "},{"code":"value","type":"codeVoice"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"type":"codeVoice","code":"onValueChanged"},{"type":"text","text":"."}],"role":"symbol","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","kind":"symbol","title":"updateValue(to:postValueChanged:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"updateValue"},{"kind":"text","text":"("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}]},"doc://Motion/documentation/Motion/SpringAnimation":{"title":"SpringAnimation","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SpringAnimation"}],"kind":"symbol","url":"\/documentation\/motion\/springanimation","role":"symbol","type":"topic","abstract":[{"type":"text","text":"This class provides the ability to animate "},{"type":"codeVoice","code":"Value"},{"text":" using a physically-modeled spring.","type":"text"}],"navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"},"doc://Motion/SH":{"identifier":"doc:\/\/Motion\/SH","title":"Swift.Hashable","type":"unresolvable"},"doc://Motion/documentation/Motion/DecayAnimation":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"DecayAnimation"}],"abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on decay functions."}],"role":"symbol","url":"\/documentation\/motion\/decayanimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","kind":"symbol","title":"DecayAnimation","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecayAnimation"}]},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"type":"topic","abstract":[{"text":"Stops the animation immediately and preserves the last set ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","title":"stop(resolveImmediately:postValueChanged:)","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stop"},{"text":"(","kind":"text"},{"text":"resolveImmediately","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"supportsVelocity","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","role":"symbol","url":"\/documentation\/motion\/valueanimation\/supportsvelocity","abstract":[{"text":"Returns whether or not this class supports velocity.","type":"text"}],"kind":"symbol","title":"supportsVelocity","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"role":"symbol","title":"velocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","type":"topic","kind":"symbol","url":"\/documentation\/motion\/valueanimation\/velocity","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"velocity"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"type":"codeVoice","code":"start"},{"type":"text","text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time."}]},"doc://Motion/s8CopyableP":{"title":"Swift.Copyable","identifier":"doc:\/\/Motion\/s8CopyableP","type":"unresolvable"},"doc://Motion/documentation/Motion/SIMDRepresentable":{"type":"topic","url":"\/documentation\/motion\/simdrepresentable","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","abstract":[{"text":"A protocol that defines how something that can be represented \/ stored in a ","type":"text"},{"type":"codeVoice","code":"SIMD"},{"text":" type as well as instantiated from said ","type":"text"},{"type":"codeVoice","code":"SIMD"},{"text":" type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMDRepresentable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SIMDRepresentable","kind":"identifier"}],"title":"SIMDRepresentable","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","kind":"symbol","role":"symbol","title":"onValueChanged(disableActions:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onValueChanged","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"disableActions"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"ValueAnimation","kind":"typeIdentifier","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">.","kind":"text"},{"text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Call this to register a "},{"code":"ValueChangedCallback","type":"codeVoice"},{"type":"text","text":" block that will be called anytime "},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes from "},{"code":"tick","type":"codeVoice"},{"text":" or if explicitly specified via ","type":"text"},{"type":"codeVoice","code":"postValueChanged"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When called, it will give the new value that "},{"type":"codeVoice","code":"value"},{"type":"text","text":" has animated to (since the last invocation)."},{"type":"text","text":" "},{"text":"If you’re animating ","type":"text"},{"type":"codeVoice","code":"CALayer"},{"type":"text","text":" objects from the block, you may supply "},{"code":"true","type":"codeVoice"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"disableActions"},{"text":" to automatically have this wrapped in a ","type":"text"},{"code":"CATransaction","type":"codeVoice"},{"type":"text","text":" that disables implicit animations for the layer."}]}}}