{"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"],"title":"Type Aliases"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"],"title":"Type Properties"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"generated":true,"title":"Default Implementations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/motion\/valueanimation"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"code":"Value","type":"codeVoice"},{"text":") over time.","type":"text"}],"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"],"title":"Inherits From","type":"inheritsFrom","kind":"relationships"},{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"type":"inheritedBy"},{"type":"conformsTo","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"],"kind":"relationships","title":"Conforms To"}],"metadata":{"role":"symbol","roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"modules":[{"name":"Motion"}],"symbolKind":"class","externalID":"s:6Motion14ValueAnimationC","title":"ValueAnimation","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"SIMDRepresentable","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"typeIdentifier","preciseIdentifier":"s:6Motion17SIMDRepresentableP"}]}]},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The interesting part of this is the ability to have animations on the value performed simultaneously using "},{"code":"simd","type":"codeVoice"},{"type":"text","text":" registers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. a "},{"type":"codeVoice","code":"CGRect"},{"type":"text","text":" that’s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"code":"value","type":"codeVoice"},{"type":"text","text":") and then setting a target ("},{"code":"toValue","type":"codeVoice"},{"text":") to animate to.","type":"text"}]},{"inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"If you wish to update the value manually, you may also do so via ","type":"text"},{"code":"updateValue(to:postValueChanged:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"code":"completionBlock","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}]}],"name":"Note","style":"note"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"This class is ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"strong"},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"type":"strong","inlineContent":[{"type":"text","text":"main thread"}]},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}],"type":"paragraph"}]},{"style":"note","type":"aside","name":"See Also","content":[{"inlineContent":[{"type":"text","text":""},{"code":"BasicAnimation","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"DecayAnimation"},{"type":"text","text":", "},{"type":"codeVoice","code":"SpringAnimation"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"content"}],"references":{"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","abstract":[],"type":"topic","title":"Hashable Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/motion\/valueanimation\/hashable-implementations"},"doc://Motion/documentation/Motion/SpringAnimation":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SpringAnimation"}],"title":"SpringAnimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","type":"topic","abstract":[{"type":"text","text":"This class provides the ability to animate "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" using a physically-modeled spring."}],"role":"symbol","navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/motion\/springanimation"},"doc://Motion/documentation/Motion/SIMDRepresentable":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SIMDRepresentable","kind":"identifier"}],"abstract":[{"type":"text","text":"A protocol that defines how something that can be represented \/ stored in a "},{"type":"codeVoice","code":"SIMD"},{"type":"text","text":" type as well as instantiated from said "},{"type":"codeVoice","code":"SIMD"},{"text":" type.","type":"text"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","title":"SIMDRepresentable","navigatorTitle":[{"text":"SIMDRepresentable","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/motion\/simdrepresentable","role":"symbol"},"doc://Motion/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/Motion\/SH","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"code":"start","type":"codeVoice"},{"text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"velocity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"title":"velocity","url":"\/documentation\/motion\/valueanimation\/velocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","role":"symbol","type":"topic","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","title":"onValueChanged(disableActions:_:)","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","kind":"symbol","abstract":[{"type":"text","text":"Call this to register a "},{"code":"ValueChangedCallback","type":"codeVoice"},{"type":"text","text":" block that will be called anytime "},{"code":"value","type":"codeVoice"},{"type":"text","text":" changes from "},{"code":"tick","type":"codeVoice"},{"text":" or if explicitly specified via ","type":"text"},{"code":"postValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"When called, it will give the new value that ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" has animated to (since the last invocation).","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you’re animating "},{"type":"codeVoice","code":"CALayer"},{"text":" objects from the block, you may supply ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" for "},{"type":"codeVoice","code":"disableActions"},{"text":" to automatically have this wrapped in a ","type":"text"},{"code":"CATransaction","type":"codeVoice"},{"type":"text","text":" that disables implicit animations for the layer."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onValueChanged"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"disableActions"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:6Motion14ValueAnimationC","text":"ValueAnimation","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">.","kind":"text"},{"text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier"},{"text":"?)","kind":"text"}]},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","title":"resolvingEpsilon","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","type":"topic","kind":"symbol","abstract":[{"text":"The default tolerance level for an animation to be considered finished.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolvingEpsilon"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":".","kind":"text"},{"text":"SIMDType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"EpsilonType"}]},"doc://Motion/documentation/Motion":{"title":"Motion","kind":"symbol","url":"\/documentation\/motion","type":"topic","abstract":[{"type":"image","identifier":"Motion-Logo-Rendered"}],"role":"collection","identifier":"doc:\/\/Motion\/documentation\/Motion"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","title":"value","url":"\/documentation\/motion\/valueanimation\/value","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"kind":"symbol","abstract":[],"role":"symbol","type":"topic"},"doc://Motion/documentation/Motion/Animation":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"type":"codeVoice","code":"Motion"},{"text":". It doesn’t do much, other than serve as a base class for all animations to inherit from and implement.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Animation","kind":"identifier"}],"type":"topic","title":"Animation","navigatorTitle":[{"text":"Animation","kind":"identifier"}],"url":"\/documentation\/motion\/animation"},"doc://Motion/documentation/Motion/BasicAnimation":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" based on basic curves (i.e. "},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"type":"text","text":", "},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"type":"text","text":", etc.)."}],"type":"topic","navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"kind":"symbol","title":"BasicAnimation","url":"\/documentation\/motion\/basicanimation","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAnimation","kind":"identifier"}]},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","title":"toValue","url":"\/documentation\/motion\/valueanimation\/tovalue","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The target value to animate towards."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"toValue"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}]},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","title":"updateValue(to:postValueChanged:)","url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"updateValue"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"postValueChanged"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"text":"Updates ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" to the supplied value and optionally invokes "},{"type":"codeVoice","code":"onValueChanged"},{"type":"text","text":"."}],"role":"symbol","type":"topic"},"doc://Motion/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/Motion\/SQ","type":"unresolvable"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","title":"ValueAnimation.ValueChangedCallback","role":"symbol","abstract":[{"text":"A block to be called when ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes."}],"navigatorTitle":[{"kind":"identifier","text":"ValueChangedCallback"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ValueChangedCallback","kind":"identifier"}]},"doc://Motion/documentation/Motion/ValueAnimation":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"title":"ValueAnimation","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":") over time."}],"url":"\/documentation\/motion\/valueanimation"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","title":"Equatable Implementations","url":"\/documentation\/motion\/valueanimation\/equatable-implementations","kind":"article","type":"topic","abstract":[]},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","type":"topic","title":"supportsVelocity","abstract":[{"type":"text","text":"Returns whether or not this class supports velocity."}],"role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"supportsVelocity"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/motion\/valueanimation\/supportsvelocity"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"type":"topic","title":"stop(resolveImmediately:postValueChanged:)","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"stop","kind":"identifier"},{"kind":"text","text":"("},{"text":"resolveImmediately","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[{"text":"Stops the animation immediately and preserves the last set ","type":"text"},{"code":"value","type":"codeVoice"},{"text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)"},"doc://Motion/documentation/Motion/DecayAnimation":{"url":"\/documentation\/motion\/decayanimation","title":"DecayAnimation","role":"symbol","abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on decay functions."}],"navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"DecayAnimation","kind":"identifier"}]}}}