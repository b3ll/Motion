{"metadata":{"externalID":"s:6Motion14ValueAnimationC","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ValueAnimation","kind":"identifier"}],"title":"ValueAnimation","modules":[{"name":"Motion"}],"symbolKind":"class","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"roleHeading":"Class"},"kind":"symbol","abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"code":"Value","type":"codeVoice"},{"type":"text","text":") over time."}],"topicSections":[{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"],"title":"Type Aliases"},{"title":"Type Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"],"type":"inheritsFrom","kind":"relationships"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"title":"Inherited By","kind":"relationships","type":"inheritedBy"},{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"],"type":"conformsTo"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The interesting part of this is the ability to have animations on the value performed simultaneously using "},{"code":"simd","type":"codeVoice"},{"type":"text","text":" registers."}]},{"inlineContent":[{"text":"i.e. a ","type":"text"},{"code":"CGRect","type":"codeVoice"},{"type":"text","text":" thatâ€™s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"code":"value","type":"codeVoice"},{"text":") and then setting a target (","type":"text"},{"type":"codeVoice","code":"toValue"},{"text":") to animate to.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This class, when ticked, will change a value and emit changes to that value via ","type":"text"},{"type":"codeVoice","code":"onValueChanged"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"If you wish to update the value manually, you may also do so via ","type":"text"},{"type":"codeVoice","code":"updateValue(to:postValueChanged:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When resolved, this class will optionally call the "},{"type":"codeVoice","code":"completionBlock"},{"text":".","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This class is ","type":"text"},{"type":"strong","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"inlineContent":[{"type":"text","text":"main thread"}],"type":"strong"},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}]}]},{"name":"See Also","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"BasicAnimation"},{"text":", ","type":"text"},{"type":"codeVoice","code":"DecayAnimation"},{"type":"text","text":", "},{"type":"codeVoice","code":"SpringAnimation"},{"text":".","type":"text"}]}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"references":{"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"kind":"article","role":"collectionGroup","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","abstract":[],"title":"Hashable Implementations","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"velocity"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"url":"\/documentation\/motion\/valueanimation\/velocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","abstract":[{"type":"text","text":"The velocity of the animation. Setting this before calling "},{"type":"codeVoice","code":"start"},{"type":"text","text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time."}],"type":"topic","kind":"symbol","role":"symbol","title":"velocity"},"doc://Motion/documentation/Motion":{"type":"topic","url":"\/documentation\/motion","title":"Motion","role":"collection","abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"identifier":"doc:\/\/Motion\/documentation\/Motion","kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","abstract":[{"text":"Updates ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"updateValue","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"postValueChanged"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"updateValue(to:postValueChanged:)","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","url":"\/documentation\/motion\/valueanimation\/equatable-implementations","kind":"article","title":"Equatable Implementations","role":"collectionGroup","abstract":[]},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","navigatorTitle":[{"kind":"identifier","text":"ValueChangedCallback"}],"abstract":[{"type":"text","text":"A block to be called when "},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes."}],"kind":"symbol","type":"topic","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","role":"symbol","title":"ValueAnimation.ValueChangedCallback","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ValueChangedCallback","kind":"identifier"}]},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"toValue","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","abstract":[{"type":"text","text":"The target value to animate towards."}],"title":"toValue","url":"\/documentation\/motion\/valueanimation\/tovalue","type":"topic"},"doc://Motion/documentation/Motion/BasicAnimation":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"BasicAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/basicanimation","navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" based on basic curves (i.e. "},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"type":"text","text":", "},{"code":"EasingFunction.easeInOut","type":"codeVoice"},{"type":"text","text":", etc.)."}],"title":"BasicAnimation","kind":"symbol","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation":{"title":"ValueAnimation","navigatorTitle":[{"text":"ValueAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/valueanimation","abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"}],"role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"doc://Motion/documentation/Motion/SpringAnimation":{"kind":"symbol","title":"SpringAnimation","url":"\/documentation\/motion\/springanimation","navigatorTitle":[{"kind":"identifier","text":"SpringAnimation"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SpringAnimation"}],"role":"symbol","abstract":[{"text":"This class provides the ability to animate ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" using a physically-modeled spring.","type":"text"}]},"doc://Motion/documentation/Motion/SIMDRepresentable":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SIMDRepresentable","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","abstract":[{"type":"text","text":"A protocol that defines how something that can be represented \/ stored in a "},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type as well as instantiated from said "},{"type":"codeVoice","code":"SIMD"},{"text":" type.","type":"text"}],"title":"SIMDRepresentable","url":"\/documentation\/motion\/simdrepresentable","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDRepresentable"}]},"doc://Motion/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/Motion\/SH"},"doc://Motion/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/Motion\/SQ"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Call this to register a "},{"type":"codeVoice","code":"ValueChangedCallback"},{"text":" block that will be called anytime ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" changes from ","type":"text"},{"code":"tick","type":"codeVoice"},{"type":"text","text":" or if explicitly specified via "},{"code":"postValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"When called, it will give the new value that ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" has animated to (since the last invocation).","type":"text"},{"text":" ","type":"text"},{"text":"If youâ€™re animating ","type":"text"},{"code":"CALayer","type":"codeVoice"},{"text":" objects from the block, you may supply ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" for "},{"type":"codeVoice","code":"disableActions"},{"text":" to automatically have this wrapped in a ","type":"text"},{"type":"codeVoice","code":"CATransaction"},{"type":"text","text":" that disables implicit animations for the layer."}],"url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","role":"symbol","title":"onValueChanged(disableActions:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onValueChanged","kind":"identifier"},{"kind":"text","text":"("},{"text":"disableActions","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ValueAnimation","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier"},{"kind":"text","text":"?)"}]},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolvingEpsilon"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":".","kind":"text"},{"text":"SIMDType","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"EpsilonType","kind":"typeIdentifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","abstract":[{"type":"text","text":"The default tolerance level for an animation to be considered finished."}],"title":"resolvingEpsilon","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","type":"topic"},"doc://Motion/documentation/Motion/Animation":{"title":"Animation","navigatorTitle":[{"text":"Animation","kind":"identifier"}],"abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"code":"Motion","type":"codeVoice"},{"type":"text","text":". It doesnâ€™t do much, other than serve as a base class for all animations to inherit from and implement."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Animation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","role":"symbol","url":"\/documentation\/motion\/animation"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"title":"stop(resolveImmediately:postValueChanged:)","url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","abstract":[{"text":"Stops the animation immediately and preserves the last set ","type":"text"},{"type":"codeVoice","code":"value"},{"text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"stop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"resolveImmediately"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)"},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"title":"supportsVelocity","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns whether or not this class supports velocity."}],"url":"\/documentation\/motion\/valueanimation\/supportsvelocity","role":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"supportsVelocity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://Motion/documentation/Motion/DecayAnimation":{"navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"title":"DecayAnimation","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"DecayAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/decayanimation","abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":" based on decay functions.","type":"text"}],"type":"topic","role":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/value":{"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","abstract":[],"title":"value","url":"\/documentation\/motion\/valueanimation\/value","type":"topic"}}}