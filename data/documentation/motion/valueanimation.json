{"abstract":[{"text":"This class provides the ability to animate changes to values (","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":") over time."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation"},"relationshipsSections":[{"title":"Inherits From","kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/Motion\/documentation\/Motion\/Animation"]},{"kind":"relationships","type":"inheritedBy","identifiers":["doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","doc:\/\/Motion\/documentation\/Motion\/SpringAnimation"],"title":"Inherited By"},{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/Motion\/SQ","doc:\/\/Motion\/SH"],"type":"conformsTo"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ValueAnimation"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","preciseIdentifier":"s:6Motion17SIMDRepresentableP","text":"SIMDRepresentable","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"The interesting part of this is the ability to have animations on the value performed simultaneously using ","type":"text"},{"code":"simd","type":"codeVoice"},{"text":" registers.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"i.e. a ","type":"text"},{"code":"CGRect","type":"codeVoice"},{"type":"text","text":" thatâ€™s animating will have all of its values animated simultaneously (vs. each value being animated sequentially), which should be more performant."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is normally accomplished by setting an initial state for the animation ("},{"type":"codeVoice","code":"value"},{"text":") and then setting a target (","type":"text"},{"type":"codeVoice","code":"toValue"},{"type":"text","text":") to animate to."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This class, when ticked, will change a value and emit changes to that value via "},{"type":"codeVoice","code":"onValueChanged"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you wish to update the value manually, you may also do so via "},{"code":"updateValue(to:postValueChanged:)","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When resolved, this class will optionally call the ","type":"text"},{"type":"codeVoice","code":"completionBlock"},{"type":"text","text":"."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The base implementation of this class is not meant to be used on its own, rather subclasses provided are to be used."}]}],"name":"Note"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This class is "},{"inlineContent":[{"type":"text","text":"not"}],"type":"strong"},{"type":"text","text":" thread-safe. It is meant to be run on the "},{"type":"strong","inlineContent":[{"text":"main thread","type":"text"}]},{"type":"text","text":" only (much like any AppKit \/ UIKit operations should be main threaded)."}]}]},{"style":"note","name":"See Also","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"BasicAnimation"},{"type":"text","text":", "},{"type":"codeVoice","code":"DecayAnimation"},{"text":", ","type":"text"},{"code":"SpringAnimation","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"aside"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Motion\/documentation\/Motion"]]},"variants":[{"paths":["\/documentation\/motion\/valueanimation"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity"]},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback"],"title":"Type Aliases"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity"],"title":"Type Properties"},{"identifiers":["doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations"],"generated":true,"title":"Default Implementations"}],"kind":"symbol","metadata":{"externalID":"s:6Motion14ValueAnimationC","roleHeading":"Class","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueAnimation"}],"role":"symbol","title":"ValueAnimation","symbolKind":"class","modules":[{"name":"Motion"}],"navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://Motion/documentation/Motion/ValueAnimation/value":{"type":"topic","title":"value","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/value","abstract":[],"url":"\/documentation\/motion\/valueanimation\/value","role":"symbol"},"doc://Motion/SH":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SH","title":"Swift.Hashable"},"doc://Motion/SQ":{"type":"unresolvable","identifier":"doc:\/\/Motion\/SQ","title":"Swift.Equatable"},"doc://Motion/documentation/Motion/ValueAnimation/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"url":"\/documentation\/motion\/valueanimation\/equatable-implementations","kind":"article","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Equatable-Implementations","type":"topic"},"doc://Motion/documentation/Motion/SpringAnimation":{"abstract":[{"text":"This class provides the ability to animate ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" using a physically-modeled spring."}],"url":"\/documentation\/motion\/springanimation","kind":"symbol","title":"SpringAnimation","identifier":"doc:\/\/Motion\/documentation\/Motion\/SpringAnimation","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SpringAnimation","kind":"identifier"}],"navigatorTitle":[{"text":"SpringAnimation","kind":"identifier"}]},"doc://Motion/documentation/Motion/BasicAnimation":{"abstract":[{"text":"This class provides the ability to animate types that conform to ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" based on basic curves (i.e. ","type":"text"},{"type":"codeVoice","code":"EasingFunction.easeIn"},{"type":"text","text":", "},{"type":"codeVoice","code":"EasingFunction.easeInOut"},{"type":"text","text":", etc.)."}],"title":"BasicAnimation","navigatorTitle":[{"text":"BasicAnimation","kind":"identifier"}],"url":"\/documentation\/motion\/basicanimation","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/BasicAnimation","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"BasicAnimation","kind":"identifier"}]},"doc://Motion/documentation/Motion/ValueAnimation/supportsVelocity":{"url":"\/documentation\/motion\/valueanimation\/supportsvelocity","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/supportsVelocity","abstract":[{"text":"Returns whether or not this class supports velocity.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"supportsVelocity"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","type":"topic","role":"symbol","title":"supportsVelocity"},"doc://Motion/documentation/Motion":{"kind":"symbol","abstract":[{"identifier":"Motion-Logo-Rendered","type":"image"}],"role":"collection","identifier":"doc:\/\/Motion\/documentation\/Motion","title":"Motion","url":"\/documentation\/motion","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation":{"url":"\/documentation\/motion\/valueanimation","navigatorTitle":[{"kind":"identifier","text":"ValueAnimation"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation","title":"ValueAnimation","abstract":[{"type":"text","text":"This class provides the ability to animate changes to values ("},{"type":"codeVoice","code":"Value"},{"text":") over time.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ValueAnimation","kind":"identifier"}],"kind":"symbol"},"doc://Motion/documentation/Motion/ValueAnimation/toValue":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toValue","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"type":"text","text":"The target value to animate towards."}],"title":"toValue","url":"\/documentation\/motion\/valueanimation\/tovalue","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/toValue","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/stop(resolveImmediately:postValueChanged:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"resolveImmediately"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","title":"stop(resolveImmediately:postValueChanged:)","abstract":[{"type":"text","text":"Stops the animation immediately and preserves the last set "},{"type":"codeVoice","code":"value"},{"type":"text","text":". This is unlike CoreAnimation where the model and presentation layers get get mismatched."}],"url":"\/documentation\/motion\/valueanimation\/stop(resolveimmediately:postvaluechanged:)","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/stop(resolveImmediately:postValueChanged:)","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/ValueChangedCallback":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"ValueChangedCallback","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A block to be called when "},{"type":"codeVoice","code":"value"},{"type":"text","text":" changes."}],"title":"ValueAnimation.ValueChangedCallback","url":"\/documentation\/motion\/valueanimation\/valuechangedcallback","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/ValueChangedCallback","type":"topic","navigatorTitle":[{"text":"ValueChangedCallback","kind":"identifier"}]},"doc://Motion/documentation/Motion/DecayAnimation":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecayAnimation"}],"role":"symbol","title":"DecayAnimation","navigatorTitle":[{"text":"DecayAnimation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/DecayAnimation","url":"\/documentation\/motion\/decayanimation","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"This class provides the ability to animate types that conform to "},{"code":"Value","type":"codeVoice"},{"text":" based on decay functions.","type":"text"}]},"doc://Motion/documentation/Motion/ValueAnimation/updateValue(to:postValueChanged:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"updateValue","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"postValueChanged","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"role":"symbol","title":"updateValue(to:postValueChanged:)","abstract":[{"type":"text","text":"Updates "},{"code":"value","type":"codeVoice"},{"text":" to the supplied value and optionally invokes ","type":"text"},{"code":"onValueChanged","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/motion\/valueanimation\/updatevalue(to:postvaluechanged:)","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/updateValue(to:postValueChanged:)","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/onValueChanged(disableActions:_:)":{"type":"topic","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/onValueChanged(disableActions:_:)","role":"symbol","title":"onValueChanged(disableActions:_:)","abstract":[{"text":"Call this to register a ","type":"text"},{"code":"ValueChangedCallback","type":"codeVoice"},{"text":" block that will be called anytime ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" changes from "},{"code":"tick","type":"codeVoice"},{"text":" or if explicitly specified via ","type":"text"},{"code":"postValueChanged","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"When called, it will give the new value that "},{"type":"codeVoice","code":"value"},{"type":"text","text":" has animated to (since the last invocation)."},{"type":"text","text":" "},{"text":"If youâ€™re animating ","type":"text"},{"type":"codeVoice","code":"CALayer"},{"type":"text","text":" objects from the block, you may supply "},{"code":"true","type":"codeVoice"},{"type":"text","text":" for "},{"code":"disableActions","type":"codeVoice"},{"text":" to automatically have this wrapped in a ","type":"text"},{"code":"CATransaction","type":"codeVoice"},{"text":" that disables implicit animations for the layer.","type":"text"}],"kind":"symbol","url":"\/documentation\/motion\/valueanimation\/onvaluechanged(disableactions:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onValueChanged","kind":"identifier"},{"text":"(","kind":"text"},{"text":"disableActions","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ValueAnimation","preciseIdentifier":"s:6Motion14ValueAnimationC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">."},{"text":"ValueChangedCallback","preciseIdentifier":"s:6Motion14ValueAnimationC0B15ChangedCallbacka","kind":"typeIdentifier"},{"text":"?)","kind":"text"}]},"doc://Motion/documentation/Motion/SIMDRepresentable":{"abstract":[{"type":"text","text":"A protocol that defines how something that can be represented \/ stored in a "},{"code":"SIMD","type":"codeVoice"},{"type":"text","text":" type as well as instantiated from said "},{"code":"SIMD","type":"codeVoice"},{"text":" type.","type":"text"}],"url":"\/documentation\/motion\/simdrepresentable","kind":"symbol","title":"SIMDRepresentable","identifier":"doc:\/\/Motion\/documentation\/Motion\/SIMDRepresentable","type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SIMDRepresentable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SIMDRepresentable"}]},"doc://Motion/documentation/Motion/ValueAnimation/resolvingEpsilon":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolvingEpsilon"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":".","kind":"text"},{"text":"SIMDType","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"EpsilonType","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"text":"The default tolerance level for an animation to be considered finished.","type":"text"}],"title":"resolvingEpsilon","url":"\/documentation\/motion\/valueanimation\/resolvingepsilon","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/resolvingEpsilon","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/velocity":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"velocity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"role":"symbol","title":"velocity","abstract":[{"text":"The velocity of the animation. Setting this before calling ","type":"text"},{"type":"codeVoice","code":"start"},{"text":" will cause the animation to be seeded with that velocity, and then the velocity may change over time.","type":"text"}],"url":"\/documentation\/motion\/valueanimation\/velocity","kind":"symbol","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/velocity","type":"topic"},"doc://Motion/documentation/Motion/ValueAnimation/Hashable-Implementations":{"role":"collectionGroup","abstract":[],"title":"Hashable Implementations","url":"\/documentation\/motion\/valueanimation\/hashable-implementations","kind":"article","identifier":"doc:\/\/Motion\/documentation\/Motion\/ValueAnimation\/Hashable-Implementations","type":"topic"},"doc://Motion/documentation/Motion/Animation":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Animation","kind":"identifier"}],"identifier":"doc:\/\/Motion\/documentation\/Motion\/Animation","navigatorTitle":[{"text":"Animation","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"This class acts as the base class for all animations within "},{"code":"Motion","type":"codeVoice"},{"type":"text","text":". It doesnâ€™t do much, other than serve as a base class for all animations to inherit from and implement."}],"title":"Animation","type":"topic","url":"\/documentation\/motion\/animation"}}}